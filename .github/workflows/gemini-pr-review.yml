name: Gemini PR Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  gemini_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai tenacity unidiff ghapi

      - name: Get PR diff (Base64 Encode)
        id: get_diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          diff=$(git diff origin/${{ github.event.pull_request.base.ref }} HEAD)
          encoded_diff=$(echo "$diff" | base64)
          echo "$encoded_diff" > diff.b64

      - name: Gemini API Call and GitHub Comment
        id: gemini_review_call
        run: |
          python <<EOF
          import os
          import google.generativeai as genai
          import base64
          from tenacity import retry, stop_after_attempt, wait_fixed
          import traceback
          import time
          from unidiff import PatchSet
          from ghapi.all import GhApi

          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-pro')
          owner, repo = os.environ['GITHUB_REPOSITORY'].split('/')
          gh = GhApi(owner=owner, repo=repo, token=os.environ['GH_TOKEN'])
          commit_id = os.environ['GITHUB_SHA']

          @retry(stop=stop_after_attempt(3), wait=wait_fixed(5))
          def generate_review(prompt):
              print("Starting Gemini API call...")
              start_time = time.time()
              response = model.generate_content(prompt)
              end_time = time.time()
              print(f"Gemini API call completed in {end_time - start_time:.2f} seconds.")
              return response.text

          with open('diff.b64', 'r') as f:
              diff_base64 = f.read().strip()
          diff_decoded = base64.b64decode(diff_base64).decode('utf-8')

          patch_set = PatchSet(diff_decoded)
          for patched_file in patch_set:
              for hunk in patched_file:
                  diff_position = 0
                  for line in hunk:
                      if line.is_added or line.is_removed:
                          diff_position +=1;
                          line_no = line.target_line_no if line.is_added else line.source_line_no
                          print(f"echo Debug: line_no={line_no}, patched_file.path={patched_file.path}, diff_position={diff_position}")
                          line_action = '+' if line.is_added else '-' if line.is_removed else ' '
                          prompt = f"Review this line of code for potential issues and provide feedback:\n\n```{line_no} {line_action} {line.value}\n```"
                          try:
                              review_text = generate_review(prompt)
                              if line_no is not None and isinstance(line_no, int) and patched_file.path and review_text and line.value:
                                  try:
                                      gh.pulls.create_review_comment(
                                          pull_number=int(os.environ['GITHUB_EVENT_PULL_REQUEST_NUMBER']),
                                          body=review_text,
                                          path=patched_file.path,
                                          position=diff_position,
                                          commit_id=commit_id,
                                      )
                                      print(f"Comment posted on {patched_file.path}:{line_no} position {diff_position}")
                                  except Exception as gh_err:
                                      print(f"GitHub API error: {gh_err}")
                                      traceback.print_exc()

                              else:
                                  print(f"Skipping comment due to invalid data: line_no={line_no}, path={patched_file.path}, review_text={review_text}, line.value = {line.value}")
                          except Exception as e:
                              print(f"Error generating review: {e}")
                              traceback.print_exc()

          EOF
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          GRPC_GO_KEEP_ALIVE_TIMEOUT_MS: "600000"

      - name: Empty review message
        if: steps.gemini_review_call.outputs.REVIEW == ''
        run: |
          echo "Gemini review was empty, or no comments were posted"